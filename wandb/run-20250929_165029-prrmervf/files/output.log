/Users/leo/Desktop/AML/Multi-GNN/inference.py:71: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(f'{data_config["paths"]["model_to_load"]}/checkpoint_{args.unique_name}.tar')
Traceback (most recent call last):
  File "/Users/leo/Desktop/AML/Multi-GNN/main.py", line 42, in <module>
    main()
  File "/Users/leo/Desktop/AML/Multi-GNN/main.py", line 39, in main
    infer_gnn(tr_data, val_data, te_data, tr_inds, val_inds, te_inds, args, data_config)
  File "/Users/leo/Desktop/AML/Multi-GNN/inference.py", line 71, in infer_gnn
    checkpoint = torch.load(f'{data_config["paths"]["model_to_load"]}/checkpoint_{args.unique_name}.tar')
  File "/Users/leo/miniconda3/envs/multignn/lib/python3.9/site-packages/torch/serialization.py", line 1097, in load
    return _load(
  File "/Users/leo/miniconda3/envs/multignn/lib/python3.9/site-packages/torch/serialization.py", line 1525, in _load
    result = unpickler.load()
  File "/Users/leo/miniconda3/envs/multignn/lib/python3.9/site-packages/torch/serialization.py", line 1492, in persistent_load
    typed_storage = load_tensor(dtype, nbytes, key, _maybe_decode_ascii(location))
  File "/Users/leo/miniconda3/envs/multignn/lib/python3.9/site-packages/torch/serialization.py", line 1466, in load_tensor
    wrap_storage=restore_location(storage, location),
  File "/Users/leo/miniconda3/envs/multignn/lib/python3.9/site-packages/torch/serialization.py", line 414, in default_restore_location
    result = fn(storage, location)
  File "/Users/leo/miniconda3/envs/multignn/lib/python3.9/site-packages/torch/serialization.py", line 391, in _deserialize
    device = _validate_device(location, backend_name)
  File "/Users/leo/miniconda3/envs/multignn/lib/python3.9/site-packages/torch/serialization.py", line 364, in _validate_device
    raise RuntimeError(f'Attempting to deserialize object on a {backend_name.upper()} '
RuntimeError: Attempting to deserialize object on a CUDA device but torch.cuda.is_available() is False. If you are running on a CPU-only machine, please use torch.load with map_location=torch.device('cpu') to map your storages to the CPU.
